(window.webpackJsonp=window.webpackJsonp||[]).push([[430],{720:function(s,a,t){"use strict";t.r(a);var n=t(8),e=Object(n.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h3",{attrs:{id:"grep"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#grep"}},[s._v("#")]),s._v(" grep")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("Usage: "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("OPTION"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(". PATTERNS "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("FILE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\nSearch "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token for-or-select variable"}},[s._v("PATTERNS")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" each FILE.\nExample: "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-i")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'hello world'")]),s._v(" menu.h main.c\nPATTERNS can contain multiple patterns separated by newlines.\n\nPattern selection and interpretation:\n  -E, --extended-regexp     PATTERNS are extended regular expressions\n  -F, --fixed-strings       PATTERNS are strings\n  -G, --basic-regexp        PATTERNS are basic regular expressions\n  -P, --perl-regexp         PATTERNS are Perl regular expressions\n  -e, "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--regexp")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("PATTERNS     use PATTERNS "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" matching    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 正则表达式")]),s._v("\n  -f, "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--file")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("FILE           take PATTERNS from FILE\n  -i, --ignore-case         ignore "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" distinctions "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" patterns and data\n      --no-ignore-case      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v(" not ignore "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" distinctions "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("default"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  -w, --word-regexp         match only whole words\n  -x, --line-regexp         match only whole lines\n  -z, --null-data           a data line ends "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" byte, not newline\n\nMiscellaneous:\n  -s, --no-messages         suppress error messages\n  -v, --invert-match        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" non-matching lines\n  -V, "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--version")]),s._v("             display version information and "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exit")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--help")]),s._v("                display this "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("help")]),s._v(" text and "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exit")]),s._v("\n\nOutput control:\n  -m, --max-count"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("NUM       stop after NUM selected lines\n  -b, --byte-offset         print the byte offset with output lines\n  -n, --line-number         print line number with output lines\n      --line-buffered       flush output on every line\n  -H, --with-filename       print "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("file")]),s._v(" name with output lines\n  -h, --no-filename         suppress the "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("file")]),s._v(" name prefix on output\n      "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--label")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("LABEL         use LABEL as the standard input "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("file")]),s._v(" name prefix\n  -o, --only-matching       show only nonempty parts of lines that match\n  -q, --quiet, "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--silent")]),s._v("     suppress all normal output\n      --binary-files"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("TYPE   assume that binary files are TYPE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                            TYPE is "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'binary'")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'text'")]),s._v(", or "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'without-match'")]),s._v("\n  -a, "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--text")]),s._v("                equivalent to --binary-files"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("text\n  "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-I")]),s._v("                        equivalent to --binary-files"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("without-match\n  -d, "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--directories")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("ACTION  how to handle directories"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                            ACTION is "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'read'")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'recurse'")]),s._v(", or "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'skip'")]),s._v("\n  -D, "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--devices")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("ACTION      how to handle devices, FIFOs and sockets"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                            ACTION is "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'read'")]),s._v(" or "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'skip'")]),s._v("\n  -r, "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--recursive")]),s._v("           like "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--directories")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("recurse\n  -R, --dereference-recursive  likewise, but follow all symlinks\n      "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--include")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("GLOB        search only files that match GLOB "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("file")]),s._v(" pattern"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--exclude")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("GLOB        skip files that match GLOB\n      --exclude-from"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("FILE   skip files that match any "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("file")]),s._v(" pattern from FILE\n      --exclude-dir"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("GLOB    skip directories that match GLOB\n  -L, --files-without-match  print only names of FILEs with no selected lines\n  -l, --files-with-matches  print only names of FILEs with selected lines\n  -c, "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--count")]),s._v("               print only a count of selected lines per FILE\n  -T, --initial-tab         "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("make")]),s._v(" tabs line up "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("if needed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  -Z, "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--null")]),s._v("                print "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" byte after FILE name\n\nContext control:\n  -B, --before-context"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("NUM  print NUM lines of leading context\n  -A, --after-context"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("NUM   print NUM lines of trailing context\n  -C, "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--context")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("NUM         print NUM lines of output context\n  "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-NUM")]),s._v("                      same as "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--context")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("NUM\n      --color"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("WHEN"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(",\n      --colour"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("WHEN"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("       use markers to highlight the matching strings"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                            WHEN is "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'always'")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'never'")]),s._v(", or "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'auto'")]),s._v("\n  -U, "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--binary")]),s._v("              "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v(" not strip CR characters at EOL "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("MSDOS/Windows"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\nWhen FILE is "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'-'")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("read")]),s._v(" standard input.  With no FILE, "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("read")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'.'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v("\nrecursive, "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'-'")]),s._v(" otherwise.  With fewer than two FILEs, assume -h.\nExit status is "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" any line "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("or "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("file")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" -L"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" is selected, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" otherwise"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" any error occurs and "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-q")]),s._v(" is not given, the "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exit")]),s._v(" status is "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(".\n\nReport bugs to: bug-grep@gnu.org\nGNU "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" home page: "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("http://www.gnu.org/software/grep/"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\nGeneral "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("help")]),s._v(" using GNU software: "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("https://www.gnu.org/gethelp/"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br"),a("span",{staticClass:"line-number"},[s._v("59")]),a("br"),a("span",{staticClass:"line-number"},[s._v("60")]),a("br"),a("span",{staticClass:"line-number"},[s._v("61")]),a("br"),a("span",{staticClass:"line-number"},[s._v("62")]),a("br"),a("span",{staticClass:"line-number"},[s._v("63")]),a("br"),a("span",{staticClass:"line-number"},[s._v("64")]),a("br"),a("span",{staticClass:"line-number"},[s._v("65")]),a("br"),a("span",{staticClass:"line-number"},[s._v("66")]),a("br"),a("span",{staticClass:"line-number"},[s._v("67")]),a("br"),a("span",{staticClass:"line-number"},[s._v("68")]),a("br"),a("span",{staticClass:"line-number"},[s._v("69")]),a("br"),a("span",{staticClass:"line-number"},[s._v("70")]),a("br"),a("span",{staticClass:"line-number"},[s._v("71")]),a("br"),a("span",{staticClass:"line-number"},[s._v("72")]),a("br")])]),a("p",[s._v("grep使用正则表达式")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--regexp")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("''")]),s._v("\n// 或\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-e")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("''")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])])])}),[],!1,null,null,null);a.default=e.exports}}]);