(window.webpackJsonp=window.webpackJsonp||[]).push([[149],{435:function(e,v,o){"use strict";o.r(v);var _=o(8),t=Object(_.a)({},(function(){var e=this,v=e._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("p",[e._v("Performance面板中的Idle")]),e._v(" "),v("p",[e._v('在 Chrome DevTools 的 Performance 面板中，"Idle" 状态表示浏览器在当前没有任务执行或渲染工作时处于空闲状态。这通常是指浏览器没有正在处理的 JavaScript 代码、用户输入或其他活动。')]),e._v(" "),v("p",[e._v("Shallow Size和Retained Size")]),e._v(" "),v("h3",{attrs:{id:"shallow-size"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#shallow-size"}},[e._v("#")]),e._v(" Shallow Size")]),e._v(" "),v("ul",[v("li",[v("strong",[e._v("定义")]),e._v("：Shallow Size 表示对象本身所占用的内存大小，不包括其引用的其他对象所占用的内存。")]),e._v(" "),v("li",[v("strong",[e._v("例子")]),e._v("：如果有一个对象 "),v("code",[e._v("obj")]),e._v("，它有一个属性指向另一个对象，那么 "),v("code",[e._v("obj")]),e._v(" 的 Shallow Size 只计算 "),v("code",[e._v("obj")]),e._v(" 自身的内存，而不计算它引用的那个对象的内存。")])]),e._v(" "),v("h3",{attrs:{id:"retained-size"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#retained-size"}},[e._v("#")]),e._v(" Retained Size")]),e._v(" "),v("ul",[v("li",[v("strong",[e._v("定义")]),e._v("：Retained Size 表示一个对象在内存中被保留的总大小，包括该对象本身和所有被该对象引用的对象的大小。这意味着它包括了该对象直接和间接引用的所有内存。")]),e._v(" "),v("li",[v("strong",[e._v("例子")]),e._v("：继续以 "),v("code",[e._v("obj")]),e._v(" 为例，如果它引用了另一个对象 "),v("code",[e._v("childObj")]),e._v("，那么 "),v("code",[e._v("obj")]),e._v(" 的 Retained Size 会包括 "),v("code",[e._v("obj")]),e._v(" 自身的内存和 "),v("code",[e._v("childObj")]),e._v(" 的内存，以及 "),v("code",[e._v("childObj")]),e._v(" 引用的所有对象。")])])])}),[],!1,null,null,null);v.default=t.exports}}]);