(window.webpackJsonp=window.webpackJsonp||[]).push([[87],{377:function(t,e,a){"use strict";a.r(e);var s=a(8),r=Object(s.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"同步和异步与宏任务和微任务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#同步和异步与宏任务和微任务"}},[t._v("#")]),t._v(" 同步和异步与宏任务和微任务")]),t._v(" "),e("h2",{attrs:{id:"event-loop-事件轮询"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#event-loop-事件轮询"}},[t._v("#")]),t._v(" Event Loop(事件轮询)")]),t._v(" "),e("div",{staticClass:"language-wiki line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-wiki"}},[e("code",[t._v('"Event Loop是一个程序结构，用于等待和发送消息和事件。（a programming construct that waits for and dispatches events or messages in a program.）"\n')])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v('简单说，就是在程序中设置两个线程：一个负责程序本身的运行，称为"主线程"；另一个负责主线程与其他进程（主要是各种I/O操作）的通信，被称为"Event Loop线程"（可以译为"消息线程"）。')]),t._v(" "),e("h2",{attrs:{id:"同步和异步"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#同步和异步"}},[t._v("#")]),t._v(" 同步和异步")]),t._v(" "),e("p",[t._v("什么是同步，什么是异步？")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("同步：程序执行过程中,上一个任务结束立即执行下一个任务,执行的顺序和代码的顺序一致。")])]),t._v(" "),e("li",[e("p",[t._v("异步：程序执行过程中,上一个任务执行结束立即执行回调函数,下一个任务不用等到上一个任务执行完成再执行,执行的顺序和代码书写的顺序有些差异。")])])]),t._v(" "),e("p",[t._v("console.log就是一个同步任务，")]),t._v(" "),e("p",[t._v("而常见的异步任务: Ajax,DOM事件操作,setTimeout,Promise的then方法,node读取文件")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/learn/JavaScript/%E5%BC%82%E6%AD%A5/%E7%AE%80%E4%BB%8B",target:"_blank",rel:"noopener noreferrer"}},[e("strong",[t._v("异步简介")]),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"异步的三种实现方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#异步的三种实现方式"}},[t._v("#")]),t._v(" 异步的三种实现方式")]),t._v(" "),e("div",{staticClass:"language-markdown line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-markdown"}},[e("code",[t._v("1）回调函数 \n         回调函数不一定是异步 , 但异步一定有回调函数 \n2）事件\n3）Promise\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br")])]),e("p",[t._v("需要注意的是⚠️：Promise构造函数是同步执行的（new Promise是同步的），而Promise是异步的（then，catch操作是异步的）")]),t._v(" "),e("p",[t._v("参考链接:")]),t._v(" "),e("ul",[e("li",[e("p",[e("a",{attrs:{href:"https://juejin.im/post/5b498d245188251b193d4059#heading-2",target:"_blank",rel:"noopener noreferrer"}},[t._v("JS事件循环机制（event loop）"),e("OutboundLink")],1)])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/zlx362211854/daily-study/issues/22#",target:"_blank",rel:"noopener noreferrer"}},[t._v("javascript是单线程语言，那他的异步机制是怎么实现的？"),e("OutboundLink")],1)])])]),t._v(" "),e("p",[e("strong",[t._v("异步任务又分为宏任务和微任务")])]),t._v(" "),e("h2",{attrs:{id:"宏任务-task-和微任务-microtasks"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#宏任务-task-和微任务-microtasks"}},[t._v("#")]),t._v(" 宏任务(task)和微任务(Microtasks)")]),t._v(" "),e("p",[t._v("宏任务和微任务都是异步任务,它们都属于一个队列，主要区别在于他们的执行顺序，Event Loop的走向和取值。")]),t._v(" "),e("h3",{attrs:{id:"宏任务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#宏任务"}},[t._v("#")]),t._v(" 宏任务")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("#")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("浏览器")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("Node")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("I/O")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("✅")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("✅")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("setTimeout")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("✅")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("✅")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("setInterval")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("✅")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("✅")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("setImmediate")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("❌")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("✅")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("requestAnimationFrame")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("✅")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("❌")])])])]),t._v(" "),e("h3",{attrs:{id:"微任务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#微任务"}},[t._v("#")]),t._v(" 微任务")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("#")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("浏览器")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("Node")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("process.nextTick")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("❌")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("✅")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("MutationObserver")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("✅")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("❌")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("Promise.then catch finally")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("✅")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("✅")])])])]),t._v(" "),e("h3",{attrs:{id:"js事件循环"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#js事件循环"}},[t._v("#")]),t._v(" js事件循环")]),t._v(" "),e("p",[e("strong",[t._v("Event Queue:")])]),t._v(" "),e("p",[e("strong",[t._v("事件队列")]),t._v("是一个存储库，在此存储来自应用程序的事件，然后再由接收程序或系统对其进行处理。\n事件队列通常在企业消息传递系统的上下文中使用。")]),t._v(" "),e("ul",[e("li",[t._v('同步和异步任务分别进入不同的执行"场所"，同步的进入主线程，异步的进入Event Table并注册函数')]),t._v(" "),e("li",[t._v("当指定的事情完成时，Event Table会将这个函数移入Event Queue。")]),t._v(" "),e("li",[t._v("主线程内的任务执行完毕为空，会去Event Queue读取对应的函数，进入主线程执行。")]),t._v(" "),e("li",[t._v("上述过程会不断重复，也就是常说的Event Loop(事件循环)。")])]),t._v(" "),e("p",[e("img",{attrs:{src:"https://user-images.githubusercontent.com/18441915/68822044-d088ad00-06ca-11ea-8570-54a683dfef5d.jpg",alt:""}})]),t._v(" "),e("h3",{attrs:{id:"js执行顺序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#js执行顺序"}},[t._v("#")]),t._v(" js执行顺序")]),t._v(" "),e("p",[t._v("https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/")]),t._v(" "),e("p",[t._v("同步 > 异步 > 微任务 > 宏任务")]),t._v(" "),e("p",[t._v("Promise构造函数是同步执行的，即new Promise() 是同步的，【"),e("strong",[t._v("也就是说new Promise()会立即执行")]),t._v("】then函数本身也是同步的，不过then(callback) 里面的callback被放入了微任务队列，产生了异步执行")])])}),[],!1,null,null,null);e.default=r.exports}}]);