(window.webpackJsonp=window.webpackJsonp||[]).push([[72],{362:function(s,a,t){"use strict";t.r(a);var e=t(8),n=Object(e.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"git-hooks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-hooks"}},[s._v("#")]),s._v(" git hooks")]),s._v(" "),a("h2",{attrs:{id:"git-hooks-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-hooks-2"}},[s._v("#")]),s._v(" git hooks")]),s._v(" "),a("p",[s._v("Git hooks 是 Git 提供的一种强大的自定义机制，它允许你在 Git 的内部操作和外部 CLI 命令执行时运行自定义脚本。使用 Git hooks 可以增强你的协作工作流程，保证代码质量和一致性，以及自动化常见的开发任务。")]),s._v(" "),a("p",[s._v("Git hooks 实现的是钩子（hooks）模式，即它允许你在 Git 操作的不同阶段中注入自定义代码。当 Git 执行相应操作时，它会先检查该操作是否有一个相应的 hook 脚本，如果有，则执行这个脚本中的代码，如果没有，则跳过这个操作。")]),s._v(" "),a("p",[s._v('Git hooks 分为两类："client-side" hooks 和 "server-side" hooks：')]),s._v(" "),a("ul",[a("li",[s._v('"client-side" hooks 是在本地的 Git 仓库中运行的，主要用于控制开发者在本地进行的工作流程，例如 pre-commit、pre-push 等，用于钩取在执行提交操作之前或推送操作之前进行代码检查或测试。')]),s._v(" "),a("li",[s._v('"server-side" hooks 是在 Git 服务器端运行的，主要用于管理团队协作，例如 pre-receive、post-receive 等，用于在代码 push 到中央仓库时触发一些额外的检查或机制。')])]),s._v(" "),a("p",[s._v("Git hooks 给予了开发者很大的自由度，在合理使用的情况下能够大大提高团队的协同效率和代码质量。常见的 Git hooks 包括：")]),s._v(" "),a("ul",[a("li",[s._v("pre-commit：在提交代码之前运行脚本，用于代码格式化、语法检查、文档生成等。")]),s._v(" "),a("li",[s._v("post-commit：在代码提交成功之后执行脚本，用于展示提交内容、自动执行其他操作等。")]),s._v(" "),a("li",[s._v("pre-push：在推送代码之前运行脚本，用于保证代码质量、运行测试等。")]),s._v(" "),a("li",[s._v("post-receive：在代码 push 到中央仓库时，在服务器端执行脚本，用于更新代码、重新编译、部署应用等。")])]),s._v(" "),a("p",[s._v("使用 Git hooks 需要注意 hook 脚本的编写和调试，并建议在脚本中添加必要的注释，以提高代码的可维护性和可读性。")]),s._v(" "),a("h3",{attrs:{id:"编写一个post-commit脚本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编写一个post-commit脚本"}},[s._v("#")]),s._v(" 编写一个post-commit脚本")]),s._v(" "),a("p",[a("code",[s._v("post-commit")]),s._v(" 属于 Git hooks 中的一种，它会在每次提交代码后被触发执行。你可以在这个脚本中编写自定义逻辑，例如通知团队成员提交成功，更新文档，自动发布应用程序等。")]),s._v(" "),a("p",[s._v("下面是一个简单的 "),a("code",[s._v("post-commit")]),s._v(" 脚本示例，它会在每次提交成功后，展示提交信息，并将提交记录写入一个日志文件中：")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token shebang important"}},[s._v("#!/bin/sh")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Get the latest commit message")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("last_commit")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" log "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-iE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"^commit [a-z0-9]+"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--color")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("never "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("awk")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'{print $2}'")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Latest commit: '),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${last_commit}")]),s._v('"')]),s._v(" \n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Write commit message to a log file")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${last_commit}")]),s._v('"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),s._v(" commit-log.txt\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("这个脚本 "),a("code",[s._v("$last_commit")]),s._v(" 变量记录了最近一次提交的哈希值，然后使用 "),a("code",[s._v("echo")]),s._v(" 打印这个哈希值到终端。此外，它还将哈希值写入 "),a("code",[s._v("commit-log.txt")]),s._v(" 日志文件中，作为记录所有提交记录的一个简单示例。")]),s._v(" "),a("p",[s._v("注意：如果想让脚本生效，还需要将其保存到 Git 仓库的 hooks 文件夹中，并赋予执行权限。")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("chmod")]),s._v(" +x post-commit\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("你可以在此示例的基础上构建更复杂的 "),a("code",[s._v("post-commit")]),s._v(" 脚本，例如包含通知机制、静态分析代码、自动化版本控制等逻辑。无论如何，Git hooks 始终是一种非常有用的工具，可以让你的协作工作流程更有生命力。")]),s._v(" "),a("h2",{attrs:{id:"pre-merge-commit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pre-merge-commit"}},[s._v("#")]),s._v(" pre-merge-commit")]),s._v(" "),a("p",[s._v("会在执行 "),a("code",[s._v("git merge --no-commit")]),s._v(" 命令时触发，用于在合并代码之前执行一些自定义的操作。在这个钩子中，你可以进行一些代码检查、测试运行、变量赋值、代码格式化或者其他任何你想做的自动化操作，以确保提交的代码的质量。")]),s._v(" "),a("p",[s._v("下面是一个简单的 "),a("code",[s._v("pre-merge-commit")]),s._v(" 钩子示例：")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token shebang important"}},[s._v("#!/bin/sh")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Running pre-merge-commit hook..."')]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Run tests before merging")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("npm")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("test")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Lint the code")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("npm")]),s._v(" run lint\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Ensure the code is formatted")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("npm")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("format")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Pre-merge checking complete."')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("h2",{attrs:{id:"post-merge"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#post-merge"}},[s._v("#")]),s._v(" post-merge")]),s._v(" "),a("p",[s._v("会在执行 "),a("code",[s._v("git merge")]),s._v(" 命令后自动触发，允许你在合并操作之后执行一些额外的操作。")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token shebang important"}},[s._v("#!/bin/sh")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 获取最新的提交 SHA-1 值 (HEAD 引用)")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("last_commit")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" rev-parse HEAD"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 获取最新提交的提交消息内容")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("commit_message")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" log "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--pretty")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("%B "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${last_commit}")]),s._v('"')]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 从提交消息内容中提取被合并分支的名称")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("merged_branch")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${commit_message}")]),s._v('"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sed")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-n")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'s/Merge branch '")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("'"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'\\(.*\\)'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("'"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("' into.*/\\1/p'")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 打印被合并分支的名称")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Merged branch: '),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${merged_branch}")]),s._v('"')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token shebang important"}},[s._v("#!/bin/sh")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("commit_message")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"Merge branch 'chengdev' into dev/1.10   89f9ewda\"")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("merged_branch")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${commit_message}")]),s._v('"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sed")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-n")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'s/Merge branch '")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("'"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'\\(.*\\)'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("'"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("' into.*/\\1/p'")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${merged_branch}")]),s._v('"')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("以上代码可以在merge的时候获取被merge的branch name")]),s._v(" "),a("h2",{attrs:{id:"实现git-merge时将指定的分支删除并创建新分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现git-merge时将指定的分支删除并创建新分支"}},[s._v("#")]),s._v(" 实现git merge时将指定的分支删除并创建新分支")]),s._v(" "),a("p",[s._v("开发时经常会从dev分支拉一个自己的分支出来开发，然后merge后再删除这个分支，再重新从最新dev拉一个分支出来继续开发")]),s._v(" "),a("p",[s._v("使用post-merge来完成这一操作")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token shebang important"}},[s._v("#!/bin/sh")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 获取上一次合并的提交 ID")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# last_merge_commit=$(git log --oneline -n 2 | tail -n 1 | cut -d " " -f 1)')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 获取最新的提交ID")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("last_commit")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" rev-parse HEAD"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 获取最新的提交信息")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("commit_message")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" log "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--pretty")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("%B "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${last_commit}")]),s._v('"')]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# echo "${commit_message}"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Merge branch 'chengdev' into feature/newissue")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 获取上一次合并的 commit 提交的分支名")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("merged_branch")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${commit_message}")]),s._v('"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sed")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-n")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'s/Merge branch '")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("'"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'\\(.*\\)'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("'"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("' into.*/\\1/p'")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${merged_branch}")]),s._v('"')]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 判断分支名是否匹配")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${merged_branch}")]),s._v('"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"chengdev"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 在这里添加你想要执行的操作")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" branch "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-d")]),s._v(" chengdev "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" checkout "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-b")]),s._v(" chengdev\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fi")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br")])]),a("h3",{attrs:{id:"如果有多个post-merge怎么办"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如果有多个post-merge怎么办"}},[s._v("#")]),s._v(" 如果有多个post-merge怎么办")]),s._v(" "),a("p",[s._v("如果有多个 "),a("code",[s._v("post-merge")]),s._v(" 钩子，Git 会在每个钩子的代码执行完成后才会继续执行下一个钩子。因此，可以在多个 "),a("code",[s._v("post-merge")]),s._v(" 钩子中分别执行不同的操作。")]),s._v(" "),a("h3",{attrs:{id:"多个post-merge文件如何命名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多个post-merge文件如何命名"}},[s._v("#")]),s._v(" 多个post-merge文件如何命名")]),s._v(" "),a("p",[s._v("多个操作无法通过在文件名前面添加 "),a("code",[s._v("post-merge-")]),s._v(" 前缀的方式来实现。在 Git 中，Hook 钩子的命名是固定的，也就是说，"),a("code",[s._v("post-merge")]),s._v(" 钩子对应的 Hook 文件名必须为 "),a("code",[s._v("post-merge")]),s._v("，不能添加其他的前缀。")]),s._v(" "),a("p",[s._v("在 "),a("code",[s._v("post-merge")]),s._v(" 钩子脚本中添加以下代码行，即可调用名为 "),a("code",[s._v("post-merge-newdev")]),s._v(" 的自定义 Hook：")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-x")]),s._v(" .git/hooks/post-merge-newdev "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v("\n  ./.git/hooks/post-merge-newdev\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fi")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h2",{attrs:{id:"pre-commit保护test分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pre-commit保护test分支"}},[s._v("#")]),s._v(" pre-commit保护test分支")]),s._v(" "),a("p",[s._v("设置test分支只能从dev分支合并代码过来，不能在test直接提交代码")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token shebang important"}},[s._v("#!/bin/sh")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 获取当前所在的分支，并将其存储在变量current_branch中")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("current_branch")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" symbolic-ref "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--short")]),s._v(" HEAD"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$current_branch")]),s._v('"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"test"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 使用git merge-base命令来检查dev分支是否是test分支的祖先分支")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" merge-base --is-ancestor dev HEAD"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"Error: You can only merge code from the 'dev' branch into the 'test' branch.\"")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exit")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fi")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fi")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exit")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("h2",{attrs:{id:"拿到git-reflog第一条commit-id"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#拿到git-reflog第一条commit-id"}},[s._v("#")]),s._v(" 拿到git reflog第一条commit ID")])])}),[],!1,null,null,null);a.default=n.exports}}]);